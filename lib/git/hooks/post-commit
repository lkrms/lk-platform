#!/bin/bash

LK_TTY_NO_COLOUR=1 \
    . lk-bash-load.sh || exit
lk_include git

s=/

HOOK=$0
[ "${HOOK#/}" != "$HOOK" ] || HOOK=$PWD/$HOOK
LOG_FILE=/tmp/${HOOK//"$s"/__}.log
printf '\n====> %s invoked\nArguments:\n%s\nEnvironment:\n%s\n' "$HOOK" \
    "$(lk_echo_args "$@" | sed 's/^/  /')" \
    "$(printenv | sed 's/^/  /')" |
    lk_log >>"$LOG_FILE"
exec > >(tee >(lk_log >>"$LOG_FILE")) 2>&1

SOURCE=file://${PWD%/.git}
DEST=/opt/${SOURCE##*/}
[ -d "$DEST/.git" ] || lk_warn "repo not found at $DEST" || exit 0
SOURCE_BRANCH=$(lk_git_branch_current)
cd "$DEST"
unset "${!GIT_@}"
BRANCH=$(lk_git_branch_current)
[ "$BRANCH" = "$SOURCE_BRANCH" ] ||
    lk_warn "repo at $DEST not on branch $SOURCE_BRANCH" || exit 0

lk_console_log "Updating repo at" "$DEST"
REMOTE=$(lk_git_remote_from_url -E \
    "^(file://)?${SOURCE#file://}/?\$" | tail -n1) ||
    { REMOTE=local &&
        { lk_run_detail git remote add "$REMOTE" "$SOURCE" ||
            lk_run_detail git remote set-url "$REMOTE" "$SOURCE"; }; } ||
    lk_die "unable to add or update remote: $REMOTE"

lk_run_detail git fetch "$REMOTE"
lk_run_detail git merge --ff-only "$REMOTE/$BRANCH" || {
    lk_git_is_clean || { lk_console_log "Stashing changes" &&
        lk_run_detail git stash || lk_die "unable to stash changes: $DEST"; }
    lk_run_detail git reset --hard "$REMOTE/$BRANCH"
}
lk_run_detail git branch --set-upstream-to="$REMOTE/$BRANCH"

lk_console_log "Done"

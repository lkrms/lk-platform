# Where a block is one or more subsequent lines of input that start when FIRST
# is matched and end when LAST, BREAK or BEFORE match, or when MAX_LINES is
# reached:
# - replace the first block found with BLOCK
# - if other blocks are found, remove them
# - if no blocks are found, add BLOCK to the input
#
# Variables:
# - BLOCK: text to insert or use as a replacement
# - FIRST: regex for the first line of a block to replace
# - LAST: regex for the last line of a block being replaced
# - BREAK: regex for the first line after a block (when matched, the previous
#   line is taken as the last in the block being replaced)
# - MAX_LINES: limit for the number of lines in a block (when reached, the
#   current line is taken as the last in the block being replaced)
# - BEFORE: regex for the line after which no changes can be made (when matched,
#   BLOCK is inserted if not already used as a replacement)
# - SQUEEZE: squeeze multiple empty or whitespace-only lines into one

BEGIN {
    blank = "^[[:blank:]]*$"
    if (!FIRST)
        FIRST = "^# Generated by "
    if (!LAST && !BREAK)
        BREAK = blank
}

function is_blank() {
    return $0 ~ blank
}

function maybe_print() {
    if (!printed) {
        if (BLOCK) {
            if (last_blank < last_printed)
                print ""
            print BLOCK
            just_printed = 1
        }
        printed = 1
    }
    skip = 0
}

!done && !skip && $0 ~ FIRST {
    skip = 1
    next
}

skip && ((MAX_LINES && skip == MAX_LINES) || (LAST && $0 ~ LAST)) {
    maybe_print()
    next
}

skip && BREAK && $0 ~ BREAK {
    maybe_print()
}

!done && BEFORE && $0 ~ BEFORE {
    maybe_print()
    done = 1
}

skip {
    skip++
    next
}

{
    if (is_blank()) {
        if (SQUEEZE) {
            $0 = ""
        }
        if (!SQUEEZE || last_blank < last_printed || just_printed) {
            print
        }
        last_blank = NR
    } else {
        if (just_printed) {
            print ""
        }
        print
    }
    just_printed = 0
    last_printed = NR
}

END {
    maybe_print()
}

#!/usr/bin/env bash

function argToJson() {
    local IFS=, jq=()
    set -- $1
    unset IFS
    while (($#)); do
        [[ $1 =~ ^([^=]+)=(.*) ]] || continue
        jq+=(--arg "${BASH_REMATCH[@]:1:2}")
        shift
    done
    [[ -z ${jq+1} ]] ||
        jq --null-input --compact-output "${jq[@]}" '$ARGS.named'
}

function addArg() {
    while [ $# -gt 0 ]; do
        arg[${#arg[@]}]=$1
        shift
    done
}

function quote() {
    ((!$#)) || { printf '%q' "$1" && shift; }
    ((!$#)) || printf ' \\\n    %q' "$@"
    printf '\n'
}

function run() {
    set -- ${arg+"${arg[@]}"} "$@"
    quote "$cmd" "$@" >"$temp/out"
    {
        printf '\n\nOutgoing:\n\n'
        quote "$cmd" "$@"
        printf '\n\ndiff:\n\n'
        ! diff -u "$temp/in" "$temp/out" || printf 'No changes\n'
    } >>/tmp/qemu-system-hvf.log
    exec "$cmd" "$@"
}

set -euo pipefail

sh=$(/usr/libexec/path_helper -s)
eval "$sh"

temp=$(mktemp -d)
quote "$0" "$@" >"$temp/in"

{
    printf '\n\n=== %s\n\nIncoming:\n\n' "$(/bin/date)"
    quote "$0" "$@"

} >>/tmp/qemu-system-hvf.log

arm64=0
if [[ $MACHTYPE =~ ^(arm|aarch)64- ]]; then
    cmd=/opt/homebrew/bin/qemu-system-aarch64
    arm64=1
else
    cmd=/usr/local/bin/qemu-system-x86_64
fi
if [ ! -x "$cmd" ]; then
    cmd=${cmd##*/}
fi

IFS=.
ver=($("$cmd" --version |
    /usr/bin/grep -Eo '\<[0-9]+\.[^[:space:]]+' |
    /usr/bin/head -n1))
unset IFS

arg=()
accel=0
cpu=0

# Don't change anything if this is a libvirt probe
(IFS=, && [[ ,$*, != *,-machine,none,* ]]) ||
    run "$@"

while [ $# -gt 0 ]; do
    case "$1" in
    -machine)
        machine=$2
        [[ $machine == *,highmem=* ]] || ((ver[0] >= 7)) ||
            machine+=",highmem=off"
        # Prevent "madvise doesn't support MADV_DONTDUMP, but
        # dump_guest_core=off specified" errors
        machine=${machine/",dump-guest-core=off"/}
        if [[ $machine =~ (.*),accel=[^[:blank:],]*(.*) ]]; then
            if ((accel)); then
                addArg -machine "${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
            else
                addArg -machine "${BASH_REMATCH[1]},accel=hvf${BASH_REMATCH[2]}"
            fi
            accel=1
        else
            addArg -machine "$machine"
        fi
        shift
        ;;
    -accel)
        ((accel)) ||
            addArg -accel hvf
        accel=1
        shift
        ;;
    -cpu)
        ((cpu)) ||
            addArg -cpu host
        cpu=1
        shift
        ;;
    -device)
        json=$2
        [[ $2 == "{"* ]] ||
            json=$(argToJson "driver=$2")
        addArg "$1" "${json:-$2}"
        shift
        ;;
    *)
        addArg "$1"
        ;;
    esac
    shift
done

((accel)) ||
    addArg -accel hvf

run

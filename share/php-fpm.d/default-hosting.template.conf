; When a `dynamic` or `ondemand` pool spawns children to respond to a burst of
; simultaneous requests, PHP-FPM may create useless processes that never
; terminate, degrading the pool until it becomes unresponsive when every
; available child is in the "Reading headers" state.
;
; To test this pool, create a burst of concurrent requests:
;
;     ab -lH "Host: {{DOMAIN}}" -c ({:echo -n $((SITE_PHP_FPM_MAX_CHILDREN - 1)):}) -n ({:echo -n $(((SITE_PHP_FPM_MAX_CHILDREN - 1) * 10)):}) https://localhost/
;
; Simultaneously, monitor PHP-FPM process states:
;
;     watch -n1 "curl -sH 'Host: {{DOMAIN}}' 'http://localhost/php-fpm-status?full' | grep '^state' | sort | uniq -c | sort -n"
;
; If processes linger in the "Reading headers" state, disable reverse proxy
; Keep-Alive requests and try again. On Apache with mod_proxy_fcgi, for example,
; use `ProxySet enablereuse=Off`.
;
; See https://github.com/php/php-src/pull/1308 for more information.
[{{SITE_PHP_FPM_POOL}}]
user = {{SITE_PHP_FPM_USER}}
listen = /run/php/php{{SITE_PHP_VERSION}}-fpm-$pool.sock
listen.owner = www-data
listen.group = www-data
pm = {{SITE_PHP_FPM_PM}}
pm.max_children = {{SITE_PHP_FPM_MAX_CHILDREN}}({:
case "$SITE_PHP_FPM_PM" in
dynamic)
  printf '\npm.%s = %s' \
    start_servers "${SITE_PHP_FPM_START_SERVERS:-1}" \
    min_spare_servers "${SITE_PHP_FPM_MIN_SPARE_SERVERS:-1}" \
    max_spare_servers "${SITE_PHP_FPM_MAX_SPARE_SERVERS:-3}"
  ;;
ondemand)
  printf '\npm.%s = %s' \
    process_idle_timeout "${SITE_PHP_FPM_PROCESS_IDLE_TIMEOUT:-10s}"
  ;;
esac
:})
; Respawn occasionally in case of memory leaks
pm.max_requests = 10000
; Necessary because `max_execution_time` only counts CPU time
request_terminate_timeout = {{SITE_PHP_FPM_TIMEOUT}}
; Check `ulimit -Hn` and increase in /etc/security/limits.d/ if necessary
rlimit_files = 1048576
pm.status_path = /php-fpm-status
ping.path = /php-fpm-ping
access.log = {{SITE_ROOT}}/log/php{{SITE_PHP_VERSION}}-fpm.access.log
access.format = "%{REMOTE_ADDR}e - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
{{PHP_SETTINGS}}

; THE FOLLOWING SETTINGS MUST NOT BE USED ON PRODUCTION SERVERS

; To enable Xdebug 2.x, install php-xdebug, uncomment the following lines, and
; remove `error_reporting` from `disable_functions` (if applicable)
;php_admin_flag[opcache.enable] = Off
;php_admin_flag[xdebug.remote_enable] = On
;php_admin_flag[xdebug.remote_autostart] = On

; To troubleshoot Xdebug, enable its step debugging log
;php_admin_value[xdebug.remote_log] = {{SITE_ROOT}}/log/php{{SITE_PHP_VERSION}}-fpm.xdebug.log

; THE FOLLOWING SETTING MUST NOT BE USED ON PUBLIC-FACING SERVERS

;php_admin_flag[xdebug.remote_connect_back] = On
